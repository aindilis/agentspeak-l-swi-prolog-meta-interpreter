(f "Defx:AchieveGoals")
(a '(#$comment #$Defx:AchieveGoals "describe the general scope that has to be reached , while the query ones are similar to the test goals defined in other languages") #$BaseKB)
(f "Defx:AchievementGoals")
(a '(#$comment #$Defx:AchievementGoals "describe , in an abstract way , the system state , that the agent is tasked to bring about") #$BaseKB)
(a '(#$comment #$Defx:AchievementGoals "actions that the agent should take , in order to achieve a certain state that is described") #$BaseKB)
(f "Defx:MessageSyntax")
(a '(#$comment #$Defx:MessageSyntax "syntax that is followed when sending a message , it is compliant with the ACL standards , using performatives ( i.e. tell , untell , ask etc . ) and follows the form of : send ( Receiver , ACT , Term )") #$BaseKB)
(f "Defx:PRSInterpreter")
(a '(#$comment #$Defx:PRSInterpreter "responsible for the execution of the entire system and aims to manage the sets of beliefs , knowledge areas ( i.e. plans ) and the process stack ( i.e. intentions ) , in order to achieve goals") #$BaseKB)
(f "Defx:PerformGoals")
(a '(#$comment #$Defx:PerformGoals "actions that Jadex agents have to take , without focusing on the overall outcome") #$BaseKB)
(f "Defx:SenderFirstArgumentSecondArgument")
(a '(#$comment #$Defx:SenderFirstArgumentSecondArgument "receiver of the message agent who sends the message") #$BaseKB)
(f "Defx:AchievementPlans")
(a '(#$comment #$Defx:AchievementPlans "triggered from achievement goals and describe all the actions that are required , for the agent to reach the desired state") #$BaseKB)
(f "Defx:AgentEnvironments")
(a '(#$comment #$Defx:AgentEnvironments "agents compete each other , aiming to achieve individual goals") #$BaseKB)
(f "Defx:AgentSystem")
(a '(#$comment #$Defx:AgentSystem "consists of two agents ( alice and bob ) , exchanging messages with each other") #$BaseKB)
(f "Defx:AgentsBeliefBase")
(a '(#$comment #$Defx:AgentsBeliefBase "huge information storage , that plays the role of agent s memory , that is able to change during the execution of the program") #$BaseKB)
(f "Defx:AnnotatedBeliefAddition")
(a '(#$comment #$Defx:AnnotatedBeliefAddition "to generate a new ( external ) event for the agent ( generate_agentspeak_event ( addb ( B , Atts ) ) ) , triggering any plans that may exist for this purpose") #$BaseKB)
(f "Defx:Argument")
(a '(#$comment #$Defx:Argument "context of the plan that is searched") #$BaseKB)
(f "Defx:AssertUnion")
(a '(#$comment #$Defx:AssertUnion "belief ( B , NewAtts") #$BaseKB)
(f "Defx:Autonomy")
(a '(#$comment #$Defx:Autonomy "allows agents to operate in complex environments ( e.g. planets exploration where human s presence or remote control are not feasible ) , to perform exhausting , time - consuming and repetitive tasks in a fast and efficient way") #$BaseKB)
(f "Defx:Bank_account")
(a '(#$comment #$Defx:Bank_account "seeks for the respective belief , at the agent s base , returning to the variable Balance , the respective value") #$BaseKB)
(a '(#$comment #$Defx:Bank_account "belief does not exist )") #$BaseKB)
(f "Defx:BeliefAnnotations")
(a '(#$comment #$Defx:BeliefAnnotations "can be used to add information for an existing belief , indicate the source of the information and other user defined attributes the beliefs may have") #$BaseKB)
(f "Defx:BlindCommitmentStrategy")
(a '(#$comment #$Defx:BlindCommitmentStrategy "goal is being dropped , if and only if it is considered , from the agent , as achieved") #$BaseKB)
(f "Defx:Evalproposals")
(a '(#$comment #$Defx:Evalproposals "triggers a lower level next plan , that would describe the respective actions for proposal evaluating") #$BaseKB)
(f "Defx:ExtachieveAddextb")
(a '(#$comment #$Defx:ExtachieveAddextb "includes the content and the i d of the sender of the message that was received , following one of the types below : Message received from Message to the com_thread main_agent_thread tell") #$BaseKB)
(f "Defx:FailureHandling")
(a '(#$comment #$Defx:FailureHandling "action fails or the interpreter is not able to find an applicable plan to execute , the whole failed plan triggering event ( + ! g ) is replaced with an internal event ( - ! g ) , that is generated in the same intention") #$BaseKB)
(f "Defx:Goal")
(a '(#$comment #$Defx:Goal "state of the system , which the agent wants to reach") #$BaseKB)
(a '(#$comment #$Defx:Goal "puts the agent in an alert state , in order to accomplish a task") #$BaseKB)
(f "Defx:IllocutionaryForce")
(a '(#$comment #$Defx:IllocutionaryForce "contains provides information about the sender of the message Knowledge Query and Manipulation Language ( KQML ) performatives ( tell , achieve etc . )") #$BaseKB)
(f "Defx:InternalActions")
(a '(#$comment #$Defx:InternalActions "actions that do not have impact on the external environment of the agent , but aim to improve the level of functionality for the whole program") #$BaseKB)
(f "Defx:Logger")
(a '(#$comment #$Defx:Logger "message sniffer , monitoring the communication between the agents") #$BaseKB)
(f "Defx:NakedFailureHandlingPlans")
(a '(#$comment #$Defx:NakedFailureHandlingPlans "executed in case that no other failure handling plan is applicable , always depending on the case of failure") #$BaseKB)
(f "Defx:Peer-To-PeerMessages")
(a '(#$comment #$Defx:Peer-To-PeerMessages "allow agents to communicate with each other") #$BaseKB)
(f "Defx:PlanLabels")
(a '(#$comment #$Defx:PlanLabels "assign symbolic names to plans , useful for debugging and communication purposes , associated with meta - level information") #$BaseKB)
(f "Defx:PredicateClear_processes")
(a '(#$comment #$Defx:PredicateClear_processes "removes all the succeeded , as well as the failed threads , ensuring the sustainability of the system s sources") #$BaseKB)
(f "Defx:PredicateTest_condition/1")
(a '(#$comment #$Defx:PredicateTest_condition/1 "used to check the argument that takes , evaluating it as true ( succeeds ) or false ( fails )") #$BaseKB)
(f "Defx:Process_message")
(a '(#$comment #$Defx:Process_message "creating a name_thread ( add_belief ( X , Atts ) , Alias ) , execute thread_create addition thread the to belief ( solve ( addb ( X , Atts )") #$BaseKB)
(a '(#$comment #$Defx:Process_message "remove_belief ( Content , Atts )") #$BaseKB)
(f "Defx:Registry")
(a '(#$comment #$Defx:Registry "responsible for updating the agent list , including all the active agents that take part in the Multi - Agent system") #$BaseKB)
(f "Defx:Solver")
(a '(#$comment #$Defx:Solver "responsible to handle the input , unifying the events with the existing plans in the agent s plan library") #$BaseKB)
(f "Defx:StrongNegation")
(a '(#$comment #$Defx:StrongNegation "used to bring beliefs more closely to the human way of thinking") #$BaseKB)
(f "Defx:TestMessage")
(a '(#$comment #$Defx:TestMessage "case where a test plan is to be triggered") #$BaseKB)
(f "Defx:TrafficControlSystem")
(a '(#$comment #$Defx:TrafficControlSystem "agents are in charge of traffic lights") #$BaseKB)
(f "Defx:UntellMessage")
(a '(#$comment #$Defx:UntellMessage "used to recall the information sent previously to the receiver") #$BaseKB)
(f "Defx:~like")
(a '(#$comment #$Defx:~like "respective agent does not like ( dislike ) cakes") #$BaseKB)
